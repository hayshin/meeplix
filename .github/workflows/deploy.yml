name: Deploy to Azure VM

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m'

            log() {
                echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
            }

            warn() {
                echo -e "${YELLOW}[$(date +'%H:%M:%S')] $1${NC}"
            }

            error() {
                echo -e "${RED}[$(date +'%H:%M:%S')] $1${NC}"
            }

            # Configuration
            REPO_DIR="/home/$USER/narrari"
            DEPLOY_DIR="/home/$USER/narrari-deploy"
            WEB_ROOT="/var/www/hayshin.dev/html"
            SERVER_PORT=3000

            log "üöÄ Starting deployment process..."

            # Step 1: Clone or pull repository
            if [ -d "$REPO_DIR" ]; then
                log "üì• Pulling latest changes..."
                cd "$REPO_DIR"
                git fetch origin
                git reset --hard origin/main
                git clean -fd
            else
                log "üì• Cloning repository..."
                git clone https://github.com/${{ github.repository }} "$REPO_DIR"
                cd "$REPO_DIR"
            fi

            # Step 2: Stop existing server
            log "üõë Stopping existing server..."
            pkill -f "narrari.*index.js" || true
            pkill -f "bun.*index.js" || true

            # Wait for processes to stop
            sleep 3

            # Force kill if still running
            if lsof -Pi :$SERVER_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
                warn "Force killing process on port $SERVER_PORT"
                kill -9 $(lsof -ti :$SERVER_PORT) || true
            fi

            # Step 3: Install server dependencies and build
            log "üîß Building server..."
            cd "$REPO_DIR/server"

            # Install dependencies
            bun install

            # Build server
            bun build src/index.ts --outdir ../build/server --target bun

            # Step 4: Install client dependencies and build
            log "üé® Building client..."
            cd "$REPO_DIR/client"

            # Install dependencies
            npm ci

            # Build client
            npm run build

            # Step 5: Deploy server
            log "üì¶ Deploying server..."
            mkdir -p "$DEPLOY_DIR"
            cp -r "$REPO_DIR/build/server"/* "$DEPLOY_DIR/"
            cp "$REPO_DIR/server/package.json" "$DEPLOY_DIR/"
            cp "$REPO_DIR/server/bun.lock" "$DEPLOY_DIR/"

            # Create .env file if it doesn't exist
            if [ ! -f "$DEPLOY_DIR/.env" ]; then
                log "üìù Creating production .env file..."
                cat > "$DEPLOY_DIR/.env" << 'EOF'
            NODE_ENV=production
            PORT=3000
            HOST=0.0.0.0
            DATABASE_URL=postgresql://narrari_user:password@localhost:5432/narrari
            LOG_LEVEL=info
            EOF
                chmod 600 "$DEPLOY_DIR/.env"
                warn "Please update .env file with your actual configuration"
            fi

            # Install production dependencies
            cd "$DEPLOY_DIR"
            bun install --production

            # Step 6: Deploy client
            log "üåê Deploying client..."
            sudo rm -rf "$WEB_ROOT"/*
            sudo cp -r "$REPO_DIR/client/build"/* "$WEB_ROOT/"
            sudo chown -R www-data:www-data "$WEB_ROOT"
            sudo chmod -R 755 "$WEB_ROOT"

            # Step 7: Start server
            log "üöÄ Starting server..."
            cd "$DEPLOY_DIR"
            nohup bun run index.js > server.log 2>&1 &
            SERVER_PID=$!
            echo $SERVER_PID > server.pid

            # Step 8: Restart nginx
            log "üîÑ Restarting nginx..."
            sudo systemctl reload nginx

            # Step 9: Verify deployment
            log "‚úÖ Verifying deployment..."
            sleep 5

            # Check server
            if kill -0 $SERVER_PID 2>/dev/null; then
                log "‚úÖ Server is running (PID: $SERVER_PID)"
            else
                error "‚ùå Server failed to start"
                tail -n 20 server.log
                exit 1
            fi

            # Check server HTTP response
            if curl -f -s --max-time 10 http://localhost:$SERVER_PORT/ >/dev/null; then
                log "‚úÖ Server is responding"
            else
                error "‚ùå Server not responding"
                exit 1
            fi

            # Check client files
            if [ -f "$WEB_ROOT/index.html" ]; then
                log "‚úÖ Client files deployed"
            else
                error "‚ùå Client files not found"
                exit 1
            fi

            # Check client HTTP response
            if curl -f -s --max-time 10 http://localhost/ >/dev/null; then
                log "‚úÖ Client is accessible"
            else
                warn "‚ö†Ô∏è  Client may not be accessible via HTTP"
            fi

            log "üéâ Deployment completed successfully!"
            log "üìä Deployment summary:"
            log "   Server PID: $SERVER_PID"
            log "   Server Port: $SERVER_PORT"
            log "   Client Path: $WEB_ROOT"
            log "   Repository: $REPO_DIR"
            log "   Deployment: $DEPLOY_DIR"
